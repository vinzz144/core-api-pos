/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Log as PrismaLog,
  AppUser as PrismaAppUser,
} from "@prisma/client";

export class LogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LogCountArgs, "select">): Promise<number> {
    return this.prisma.log.count(args);
  }

  async logs<T extends Prisma.LogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogFindManyArgs>
  ): Promise<PrismaLog[]> {
    return this.prisma.log.findMany<Prisma.LogFindManyArgs>(args);
  }
  async log<T extends Prisma.LogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogFindUniqueArgs>
  ): Promise<PrismaLog | null> {
    return this.prisma.log.findUnique(args);
  }
  async createLog<T extends Prisma.LogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogCreateArgs>
  ): Promise<PrismaLog> {
    return this.prisma.log.create<T>(args);
  }
  async updateLog<T extends Prisma.LogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogUpdateArgs>
  ): Promise<PrismaLog> {
    return this.prisma.log.update<T>(args);
  }
  async deleteLog<T extends Prisma.LogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LogDeleteArgs>
  ): Promise<PrismaLog> {
    return this.prisma.log.delete(args);
  }

  async getAppUser(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.log
      .findUnique({
        where: { id: parentId },
      })
      .appUser();
  }
}
